#include<stdio.h>
#include<process.h>
void main()
{
 int burst[20],p[20],wait_T[20],at[20],done[20],bt[20],tat[20],nominate[20],tot,pos,temp,temp1,size=0,i,k,l=0,j,total=0,TW=0,n,x;
 int arrival_T[20];
 float priority[20],temp2;
 
 void init()                            // to initialize nominate array with 99999
 { 
  int i;
  for(i=0;i<tot;i++)
  nominate[i]=99999;
 }

 void init2()                            // to initialize priority array with 99999.0
 {int i;
  for(i=0;i<tot;i++)
  priority[i]=99999.0;
 }

 int prsize()                            // to get size of priority array(non 99999.0 elements)
 {
  int pos,size=0;
  if(priority[0]!=99999.0)
  {
   pos=0;
   while(priority[pos]!=99999.0)
   {
 	size++;
 	pos++;
   }
  } 
  return size;
 }

 int nomsize()                            //to get the size of nominated array(non 99999 elements)
 {
  int pos,size=0;
  if(priority[0]!=99999)
  {
   pos=0;
   while(priority[pos]!=99999)
   {
 	size++;
 	pos++;
   }
  }
  return size;
 }
 //============================================================================= MAIN PROGRAM STARTS
 
 printf("Enter number of processes(between 0 and 21) ");                            //getting total no. of processes
 scanf("%d",&tot);
 if(tot>=21)
 {
  printf("\nSTACK OVERFLOW");
  exit(0);
 } 
 init();
 init2();
 
 if(tot>=1)
 {
 printf("Enter Estimated Time:\n");                               //getting burst time of all processes
 for(i=0;i<tot;i++)
 {
  printf("p%d:",i+1);
  scanf("%d",&burst[i]);
  p[i]=i+1;
 }
 
 printf("\nEnter Arrival Time:\n");                               //getting arrival time of all processes
 for(i=0;i<tot;i++)
 {
  printf("p%d:",i+1);
  scanf("%d",&at[i]);
 }
 
 for(i=0;i<tot-1;i++)                                             //sorting processes,burst time based on arrival time                                              
 {
  pos=i;
  for(j=i+1;j<tot;j++)
  {
   if(at[j]<at[pos])
   pos=j;
  }
  temp=at[i];
  at[i]=at[pos];
  at[pos]=temp;
  temp=p[i];
  temp1=burst[i];
  p[i]=p[pos];
  burst[i]=burst[pos];
  p[pos]=temp;
  burst[pos]=temp1;
 }
 //===================== initialization of done,bt,tat array for very first priority
 k=0;
 done[l]=p[0];
 bt[l]=burst[0];
 tat[l]=burst[0];
 //=================================================================================
 k++;l++;
 wait_T[0]=0;
 TW=burst[0]+TW;                               //tracking total time elapsed
 i=1;
 
 //=================== label
 label:
 n=nomsize();
 x=0;
 if(n==0)                                      //if whole nomination array is 99999
 {
  for(i;i<tot;i++)
  {
   if(at[i]<=TW)
   {
  	nominate[x]=i;
  	priority[x]=1.0+((float)TW-(float)at[nominate[x]])/(float)burst[nominate[x]];
    x++;
   }
  }
 }
 else{
 	  j=0;
 	  while(nominate[j]!=99999)
	  {
	   priority[x]=1.0+((float)TW-(float)at[nominate[x]])/(float)burst[nominate[x]];
	   j++;
	   x++;
	   k++;
      }
      i=k;
      for(i;i<tot;i++)
      {
       if(i<tot && at[i]<=TW)
       {
  	    nominate[x]=i;
  	    priority[x]=1.0+((float)TW-(float)at[nominate[x]])/(float)burst[nominate[x]];
        x++;
	   }
      }
     }

 
 size=prsize();
 
 if(size>1)                               //number of non 99999.0 elements in priority array
 {                                        //sorting priority of process
  for(i=0;i<size-1;i++)
  {
   for(j=i+1;j<size;j++)
   {
	if(priority[i]<priority[j])
	{
	 temp2=priority[i];
	 temp=nominate[i];
	 priority[i]=priority[j];
	 nominate[i]=nominate[j];
	 priority[j]=temp2;
	 nominate[j]=temp;
	}
   }
  } 
 }

 if(size==1)
 {   
  i=0;
  done[l]=p[nominate[i]];
  bt[l]=burst[nominate[i]];
  tat[l]=burst[nominate[i]];
  wait_T[l]=TW-at[nominate[i]];
  k++;l++;
  TW=TW+burst[nominate[i]];
 }
 
 if(size>1)
 {
  i=0;
  done[l]=p[nominate[i]];
  bt[l]=burst[nominate[i]];
  tat[l]=burst[nominate[i]];
  wait_T[l]=TW-at[nominate[i]];
  k++;l++;
  TW=TW+burst[nominate[i]];
  i++;
  while(nominate[i]!=99999)
  {
   temp=nominate[i];
   temp2=priority[i];
   nominate[i-1]=temp;
   priority[i-1]=temp2;
   i++;
  }
  nominate[i-1]=99999;
  priority[i-1]=99999.0;
 }

 k=l;
 i=k;
 j=0;

 if(k>tot-1)
 goto end;
 goto label;

 end:
 
 for(i=0;i<tot;i++)
 {
  burst[i]=bt[i];
  p[i]=done[i];
 }
 printf("\nSequence of processes\t Waiting time\t\t Burst Time\t\t Turnaround Time\n");
 for(i=0;i<tot;i++)
 printf("p%d\t\t\t\t%d\t\t\t%d\t\t\t%d\n",p[i],wait_T[i],burst[i],tat[i]+wait_T[i]); 
 }
 else
 {
  printf("\nSORRY no processes found");
  exit(0);
 }
}
